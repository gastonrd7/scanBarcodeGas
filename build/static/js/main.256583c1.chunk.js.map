{"version":3,"sources":["react-webcam.js","App.js","reportWebVitals.js","index.js"],"names":["Webcam","state","hasUserMedia","result","scanBarcode","bind","navigator","mediaDevices","getUserMedia","webkitGetUserMedia","mozGetUserMedia","msGetUserMedia","mountedInstances","push","this","userMediaRequested","requestUserMedia","nextProps","JSON","stringify","audioConstraints","props","videoConstraints","index","indexOf","splice","length","stream","getVideoTracks","getAudioTracks","map","track","stop","window","URL","revokeObjectURL","src","canvas","getCanvas","toDataURL","screenshotFormat","screenshotQuality","video","videoHeight","ctx","document","createElement","aspectRatio","videoWidth","canvasWidth","minScreenshotWidth","clientWidth","canvasHeight","minScreenshotHeight","width","height","getContext","imageSmoothingEnabled","imageSmoothing","drawImage","context","getElementById","clearRect","strokeStyle","lineWidth","reader","decodeBuffer","getImageData","data","dynamsoft","BarcodeReader","EnumImagePixelFormat","IPF_ARGB_8888","then","results","showResults","clearOverlay","txts","i","LocalizationResult","ExtendedResultArray","Confidence","BarcodeText","setState","onScann","join","e","sourceSelected","constraints","audio","forEach","instance","handleUserMedia","catch","optionalSource","id","optional","sourceId","constraintToSourceId","constraint","deviceId","Array","isArray","ideal","MediaStreamTrack","getSources","sources","audioSource","videoSource","source","kind","audioSourceId","videoSourceId","err","onUserMediaError","srcObject","error","createObjectURL","onUserMedia","onClick","autoPlay","muted","className","playsInline","style","ref","Component","defaultProps","facingMode","test","userAgent","exact","App","setResult","value","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.256583c1.chunk.js","sourcesContent":["// https://github.com/mozmorris/react-webcam\r\nimport React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport './react-webcam.css';\r\nfunction hasGetUserMedia() {\r\n  return !!(\r\n    (navigator.mediaDevices && navigator.mediaDevices.getUserMedia) ||\r\n    navigator.webkitGetUserMedia ||\r\n    navigator.mozGetUserMedia ||\r\n    navigator.msGetUserMedia\r\n  );\r\n}\r\n\r\nconst constrainStringType = PropTypes.oneOfType([\r\n  PropTypes.string,\r\n  PropTypes.arrayOf(PropTypes.string),\r\n  PropTypes.shape({\r\n    exact: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.arrayOf(PropTypes.string),\r\n    ]),\r\n  }),\r\n  PropTypes.shape({\r\n    ideal: PropTypes.oneOfType([\r\n      PropTypes.string,\r\n      PropTypes.arrayOf(PropTypes.string),\r\n    ]),\r\n  }),\r\n]);\r\n\r\nconst constrainBooleanType = PropTypes.oneOfType([\r\n  PropTypes.shape({\r\n    exact: PropTypes.bool,\r\n  }),\r\n  PropTypes.shape({\r\n    ideal: PropTypes.bool,\r\n  }),\r\n]);\r\n\r\nconst constrainLongType = PropTypes.oneOfType([\r\n  PropTypes.number,\r\n  PropTypes.shape({\r\n    exact: PropTypes.number,\r\n    ideal: PropTypes.number,\r\n    min: PropTypes.number,\r\n    max: PropTypes.number,\r\n  }),\r\n]);\r\n\r\nconst constrainDoubleType = constrainLongType;\r\n\r\nconst audioConstraintType = PropTypes.shape({\r\n  deviceId: constrainStringType,\r\n  groupId: constrainStringType,\r\n  autoGainControl: constrainBooleanType,\r\n  channelCount: constrainLongType,\r\n  latency: constrainDoubleType,\r\n  noiseSuppression: constrainBooleanType,\r\n  sampleRate: constrainLongType,\r\n  sampleSize: constrainLongType,\r\n  volume: constrainDoubleType,\r\n});\r\n\r\nconst videoConstraintType = PropTypes.shape({\r\n  deviceId: constrainStringType,\r\n  groupId: constrainStringType,\r\n  aspectRatio: constrainDoubleType,\r\n  facingMode: constrainStringType,\r\n  frameRate: constrainDoubleType,\r\n  height: constrainLongType,\r\n  width: constrainLongType,\r\n});\r\n\r\nconst IsMobile = () => /iPhone|iPad|iPod|Android/i.test(navigator.userAgent);\r\n\r\nexport default class Webcam extends Component {\r\n  static defaultProps = {\r\n    audio: true,\r\n    className: '',\r\n    height: 480,\r\n    imageSmoothing: true,\r\n    onUserMedia: () => {},\r\n    onUserMediaError: () => {},\r\n    screenshotFormat: 'image/webp',\r\n    width: 640,\r\n    screenshotQuality: 0.92,\r\n    videoConstraints : { facingMode: IsMobile() ? { exact: \"environment\" } : \"user\" }\r\n    // videoConstraints : { facingMode: \"user\" }, /* camara frontal */\r\n    // videoConstraints : { facingMode: { exact: \"environment\" } }, /* camara trasera */\r\n  };\r\n\r\n  static propTypes = {\r\n    audio: PropTypes.bool,\r\n    onUserMedia: PropTypes.func,\r\n    onUserMediaError: PropTypes.func,\r\n    height: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    width: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\r\n    screenshotFormat: PropTypes.oneOf([\r\n      'image/webp',\r\n      'image/png',\r\n      'image/jpeg',\r\n    ]),\r\n    style: PropTypes.object,\r\n    className: PropTypes.string,\r\n    screenshotQuality: PropTypes.number,\r\n    minScreenshotWidth: PropTypes.number,\r\n    minScreenshotHeight: PropTypes.number,\r\n    audioConstraints: audioConstraintType,\r\n    videoConstraints: videoConstraintType,\r\n    imageSmoothing: PropTypes.bool,\r\n    onScann: PropTypes.func,\r\n  };\r\n\r\n  static mountedInstances = [];\r\n\r\n  static userMediaRequested = false;\r\n\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      hasUserMedia: false,\r\n      result: null\r\n    };\r\n\r\n    this.scanBarcode = this.scanBarcode.bind(this);\r\n  }\r\n\r\n  componentDidMount() {\r\n    if (!hasGetUserMedia()) return;\r\n\r\n    Webcam.mountedInstances.push(this);\r\n\r\n    if (!this.state.hasUserMedia && !Webcam.userMediaRequested) {\r\n      this.requestUserMedia();\r\n    }\r\n    this.scanBarcode();\r\n  }\r\n\r\n  componentWillUpdate(nextProps) {\r\n    if (\r\n      JSON.stringify(nextProps.audioConstraints) !==\r\n        JSON.stringify(this.props.audioConstraints) ||\r\n      JSON.stringify(nextProps.videoConstraints) !==\r\n        JSON.stringify(this.props.videoConstraints)\r\n    ) {\r\n      this.requestUserMedia();\r\n    }\r\n  }\r\n\r\n  componentWillUnmount() {\r\n    const index = Webcam.mountedInstances.indexOf(this);\r\n    Webcam.mountedInstances.splice(index, 1);\r\n\r\n    Webcam.userMediaRequested = false;\r\n    if (Webcam.mountedInstances.length === 0 && this.state.hasUserMedia) {\r\n      if (this.stream.getVideoTracks && this.stream.getAudioTracks) {\r\n        this.stream.getVideoTracks().map(track => track.stop());\r\n        this.stream.getAudioTracks().map(track => track.stop());\r\n      } else {\r\n        this.stream.stop();\r\n      }\r\n      window.URL.revokeObjectURL(this.state.src);\r\n    }\r\n  }\r\n\r\n  getScreenshot() {\r\n    if (!this.state.hasUserMedia) return null;\r\n\r\n    const canvas = this.getCanvas();\r\n    return (\r\n      canvas &&\r\n      canvas.toDataURL(\r\n        this.props.screenshotFormat,\r\n        this.props.screenshotQuality,\r\n      )\r\n    );\r\n  }\r\n\r\n  getCanvas() {\r\n    if (!this.state.hasUserMedia || !this.video.videoHeight) return null;\r\n\r\n    if (!this.ctx) {\r\n      const canvas = document.createElement('canvas');\r\n      const aspectRatio = this.video.videoWidth / this.video.videoHeight;\r\n\r\n      var canvasWidth = this.props.minScreenshotWidth || this.video.clientWidth;\r\n      var canvasHeight = canvasWidth / aspectRatio;\r\n\r\n      if (this.props.minScreenshotHeight && (canvasHeight < this.props.minScreenshotHeight)) {\r\n        canvasHeight = this.props.minScreenshotHeight;\r\n        canvasWidth = canvasHeight * aspectRatio;\r\n      }\r\n\r\n      canvas.width = canvasWidth;\r\n      canvas.height = canvasHeight;\r\n\r\n      this.canvas = canvas;\r\n      this.ctx = canvas.getContext('2d');\r\n    }\r\n\r\n    const { ctx, canvas } = this;\r\n    ctx.imageSmoothingEnabled = this.props.imageSmoothing;\r\n    ctx.drawImage(this.video, 0, 0, canvas.width, canvas.height);\r\n\r\n    return canvas;\r\n  }\r\n\r\n  clearOverlay() {\r\n    let context = document.getElementById('overlay').getContext('2d');\r\n    context.clearRect(0, 0, this.props.width, this.props.height);\r\n    context.strokeStyle = '#ff0000';\r\n    context.lineWidth = 5;\r\n    return context;\r\n  }\r\n\r\n  scanBarcode() {\r\n    debugger\r\n    if (window.reader) {\r\n      let canvas = document.createElement('canvas');\r\n      canvas.width = this.props.width;\r\n      canvas.height = this.props.height\r\n      let ctx = canvas.getContext('2d');\r\n      ctx.drawImage(this.video, 0, 0, this.props.width, this.props.height);\r\n    \r\n      window.reader.decodeBuffer(\r\n        ctx.getImageData(0, 0, canvas.width, canvas.height).data,\r\n        canvas.width,\r\n        canvas.height,\r\n        canvas.width * 4,\r\n        window.dynamsoft.BarcodeReader.EnumImagePixelFormat.IPF_ARGB_8888\r\n      )\r\n      .then((results) => {\r\n        this.showResults(results);\r\n      });\r\n    }\r\n    \r\n  }\r\n\r\n  showResults(results) {\r\n    let context = this.clearOverlay();\r\n    let txts = [];\r\n    try {\r\n      let localization;\r\n      for (var i = 0; i < results.length; ++i) {\r\n        if (results[i].LocalizationResult.ExtendedResultArray[0].Confidence >= 30) {\r\n          txts.push(results[i].BarcodeText);\r\n          localization = results[i].LocalizationResult;\r\n          this.setState({ result: results[i].BarcodeText });\r\n          //this.props.onScann(results[i].BarcodeText);\r\n          //this.drawResult(context, localization, results[i].BarcodeText);\r\n        }\r\n      }\r\n\r\n      if (txts.length > 0) {\r\n        debugger\r\n        this.props.onScann(txts.join(', '));\r\n          //alert(txts.join(', '));\r\n      }\r\n      else {\r\n        this.scanBarcode();\r\n      }\r\n      this.scanBarcode();\r\n      \r\n    } catch (e) {\r\n      this.scanBarcode();\r\n    }\r\n  }\r\n\r\n  requestUserMedia() {\r\n    navigator.getUserMedia =\r\n      navigator.mediaDevices.getUserMedia ||\r\n      navigator.webkitGetUserMedia ||\r\n      navigator.mozGetUserMedia ||\r\n      navigator.msGetUserMedia;\r\n\r\n    const sourceSelected = (audioConstraints, videoConstraints) => {\r\n      const constraints = {\r\n        video: videoConstraints || true,\r\n      };\r\n\r\n      if (this.props.audio) {\r\n        constraints.audio = audioConstraints || true;\r\n      }\r\n\r\n      navigator.mediaDevices\r\n        .getUserMedia(constraints)\r\n        .then((stream) => {\r\n          Webcam.mountedInstances.forEach(instance =>\r\n            instance.handleUserMedia(null, stream),\r\n          );\r\n        })\r\n        .catch((e) => {\r\n          Webcam.mountedInstances.forEach(instance =>\r\n            instance.handleUserMedia(e),\r\n          );\r\n        });\r\n    };\r\n\r\n    if ('mediaDevices' in navigator) {\r\n      sourceSelected(this.props.audioConstraints, this.props.videoConstraints);\r\n    } else {\r\n      const optionalSource = id => ({ optional: [{ sourceId: id }] });\r\n\r\n      const constraintToSourceId = (constraint) => {\r\n        const deviceId = (constraint || {}).deviceId;\r\n\r\n        if (typeof deviceId === 'string') {\r\n          return deviceId;\r\n        } else if (Array.isArray(deviceId) && deviceId.length > 0) {\r\n          return deviceId[0];\r\n        } else if (typeof deviceId === 'object' && deviceId.ideal) {\r\n          return deviceId.ideal;\r\n        }\r\n\r\n        return null;\r\n      };\r\n\r\n      MediaStreamTrack.getSources((sources) => {\r\n        let audioSource = null;\r\n        let videoSource = null;\r\n\r\n        sources.forEach((source) => {\r\n          if (source.kind === 'audio') {\r\n            audioSource = source.id;\r\n          } else if (source.kind === 'video') {\r\n            videoSource = source.id;\r\n          }\r\n        });\r\n\r\n        const audioSourceId = constraintToSourceId(this.props.audioConstraints);\r\n        if (audioSourceId) {\r\n          audioSource = audioSourceId;\r\n        }\r\n\r\n        const videoSourceId = constraintToSourceId(this.props.videoConstraints);\r\n        if (videoSourceId) {\r\n          videoSource = videoSourceId;\r\n        }\r\n\r\n        sourceSelected(\r\n          optionalSource(audioSource),\r\n          optionalSource(videoSource),\r\n        );\r\n      });\r\n    }\r\n\r\n    Webcam.userMediaRequested = true;\r\n  }\r\n\r\n  handleUserMedia(err, stream) {\r\n    if (err) {\r\n      this.setState({ hasUserMedia: false });\r\n      this.props.onUserMediaError(err);\r\n\r\n      return;\r\n    }\r\n\r\n    this.stream = stream;\r\n\r\n    try {\r\n      this.video.srcObject = stream;\r\n      this.setState({ hasUserMedia: true });\r\n    } catch (error) {\r\n      this.setState({\r\n        hasUserMedia: true,\r\n        src: window.URL.createObjectURL(stream),\r\n      });\r\n    }\r\n\r\n    this.props.onUserMedia();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div id='videoview' width={this.props.width} height={this.props.height}>\r\n        <button onClick={this.scanBarcode}>Scan Barcodes</button>\r\n          <video\r\n          autoPlay\r\n          width={this.props.width}\r\n          height={this.props.height}\r\n          src={this.state.src}\r\n          muted={this.props.audio}\r\n          className={this.props.className}\r\n          playsInline\r\n          style={this.props.style}\r\n          ref={(ref) => {\r\n            this.video = ref;\r\n          }}\r\n        />\r\n        <canvas id=\"overlay\" width={this.props.width} height={this.props.height}></canvas>\r\n        \r\n        \r\n      </div>\r\n    );\r\n  }\r\n}","import React, { Component } from 'react';\nimport Webcam from './react-webcam';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super();\n    this.state = {\n      result: null\n    };\n  }\n\n  setResult = (value) => {\n    debugger;\n    this.setState({ result: value });\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <Webcam onScann={this.setResult} />\n        <p>{this.state.result}</p>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}